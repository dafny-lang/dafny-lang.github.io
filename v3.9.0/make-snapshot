#! /usr/bin/env bash

## This script copies the current development docs into the dafny.org
## user-facing web pages, making a snapshot of the current docs.
## It is intended to be run as part of a release procedure (so that
## the docs snapshot corresponds to the release functionality).
## The script creates two PRs -- one in the dafny-lang/dafny repo and
## one in the dafny-lang/dafny-lang.github.io repo. These need to be
## reviewed, approved and merged. After that is successful the 
## local and remote snapshot-vX.Y.Z branches can be deleted.

## This procedure relies on the person executing it to have a clone of
## dafny-lang/dafny-lang.github.io as a sibling to the clone of
## dafny-lang/dafny.

## The script takes one argument -- the release name in X.Y.Z form
## (The script prepends a 'v' as the release folder name.)

## 

if [ "$#" != "1" ]; then
  echo Expected the new version number as the one argument
  exit 1
fi

## The version name
V=v$1
## Text string in index.html that marks where to put the version text
M="<!-- VERSION INFO HERE-->"

## Location of the development docs folder
D=$(dirname "$BASH_SOURCE")
cd "$D"

## Branch name
B=`echo snapshot-$V | sed -e "s/\./_/g"`

## Location of the dafny-lang.github.io repo
T=../../dafny-lang.github.io
if [ ! -e "$T" ]; then
  echo Expecting the dafny-lang.github.io repo to be parallel to the dafny repo
  echo Nothing exists at $T
  exit 1
fi
if [ -e $T/$V ]; then
  echo FAILURE: $T/$V already exists; exit 1;
fi
echo Executing from `pwd`
echo Target is $T
echo Version is $V
echo Branch is $B

## Changes locally
git checkout master
git pull upstream
git checkout -b $B
echo "- [$V](https://davidcok.github.io/dafny-lang.github.io/$V)" >> Snapshots.md
git add Snapshots.md
git commit -m "Link to snapshot for $V"
git push --set-upstream origin $B

## Changes on dafny-lang.github.io
( cd $T && \
  git checkout main && \
  git pull && \
  git checkout -b $B && \
  git push -u origin $B ) || \
    (echo FAILED to create target branch; exit 1)


cp -R . $T/$V || ( echo copy FAILED; exit 1 )
cp -R $T/$V/ $T/latest/

## Tweaks to snapshot files

rm $T/$V/DafnyRef/version.txt
echo $V > $T/$V/DafnyRef/version.txt
rm $T/latest/DafnyRef/version.txt
echo "Latest release snapshot" > $T/$V/DafnyRef/version.txt

grep -q "$M" $T/$V/index.html || (echo FAILED: No Version marker line in $T/$V/index.html ; exit 1 )

sed -i -e "s/$M.*/$M$V documentation snapshot/" $T/$V/index.html || (echo Version replacement FAILED; exit 1; )
sed -i -e "s/$M.*/$MLatest release documentation snapshot/" $T/latest/index.html || (echo Version replacement FAILED; exit 1; )


(cd $T && \
  git add -u && \
  git add $V && \
  git commit -m "Documentation snapshot for $V" && \
  git push origin $B ) ||\
	( echo FAILED to commit or push the snapshot ; exit 1  )
